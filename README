Description:
Some tools and a custom file format for parallelizing compression and 
encryption.

pxzaes.sh compresses and encrypts data. 
dpxzaes.sh decrypts and decompresses data from pxzaes.sh. 
test_pxzaes.sh is used for testing the two tools.
The other script files are included by the main tools, so they should be in the
 same directory as the main tools.
Both tools read passwords from stdin.

File format generated by pxzaes.sh and consumed by dpxzaes.sh
---beginning of file---
magic
argon2id of password
tar containing AES256 encrypted chunks
---end of file---

pxzaes.sh first uses pixz to compress the input file, the compressed file is
split into chunks, each chunk is encrypted using gpg, the chunks are combined 
into a tarball, and then the results are collected into a pxzgpg file. 
dpxzaes.sh does the inverse of the process done by pxzaes.sh.

Tools Used:
pixz is used for parallelized compression/decompression, and gpg is used for 
AES256 encryption/decryption. argon2 was used for password hashing.

Performance Results:
pxzaes.sh:   7.5220 s
dpxzaes.sh:  3.9614 s

gpg encrypt: 49.296 s
gpg decrypt: 10.073 s

Testing Conditions:
Tests were conducted using a Ryzen 7950x + 64GB of DDR5 4800 MT/s; all files 
were stored in a ramdisk. The file processed was a 4GB MP4 file stored in a 
ramdisk. The video file was not compressed using pixz first. The execution time
 of each program was sampled 9 times. Commands used:
time sh -c 'echo "123" | ./pxzaes.sh file.mp4 -O > /dev/null'
time sh -c 'echo "123" | ./dpxzaes.sh file.mp4.pxzgpg -O > /dev/null'
time gpg -q --output /dev/null --passphrase '123' --batch --yes --symmetric \
    --cipher-algo AES256 file.mp4
time gpg --output /dev/null --passphrase '123' --batch --yes  -d file.mp4.gpg

